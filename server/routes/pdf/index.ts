import { Router } from 'express';
import { db } from '../../../db/index.js';
import { campaigns, newsItems, campaignChannels } from '../../../db/schema.js';
import { eq, and } from 'drizzle-orm';

// Simple auth middleware
const requireAuth = (req: any, res: any, next: any) => {
  if (req.isAuthenticated()) return next();
  res.status(401).json({ message: "Not authenticated" });
};

const router = Router();

// Helper function to format date
const formatDate = (date: Date | string | null) => {
  if (!date) return 'N/A';
  return new Date(date).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
};

// Generate NewsJack HTML content
const generateNewsJackHTML = (newsItem: any, campaign: any) => {
  const platformOutputs = newsItem.platformOutputs || {};
  const generationMetrics = newsItem.generationMetrics || {};
  
  let platformContent = '';
  const platforms = ['twitter', 'linkedin', 'instagram', 'facebook', 'tiktok'];
  platforms.forEach(platform => {
    if (platformOutputs[platform]) {
      platformContent += `
        <div class="platform-section">
          <h3>${platform.charAt(0).toUpperCase() + platform.slice(1)} Content</h3>
          <div class="platform-output">${platformOutputs[platform] || 'No content generated'}</div>
        </div>
      `;
    }
  });

  let metricsContent = '';
  if (Object.keys(generationMetrics).length > 0) {
    metricsContent = `
      <div class="page-break">
        <h2>Generation Metrics</h2>
        ${Object.entries(generationMetrics).map(([key, value]) => 
          `<p><strong>${key}:</strong> ${JSON.stringify(value)}</p>`
        ).join('')}
      </div>
    `;
  }

  return `
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <title>NewsJack Export - ${newsItem.headline}</title>
        <style>
            @page { size: A4; margin: 1cm; }
            body { font-family: 'Open Sans', Arial, sans-serif; font-size: 11pt; line-height: 1.4; color: #333; }
            .header { text-align: center; margin-bottom: 30px; border-bottom: 2px solid #2563eb; padding-bottom: 20px; }
            .title { font-size: 24pt; font-weight: bold; color: #2563eb; margin-bottom: 10px; }
            .subtitle { font-size: 14pt; color: #666; margin-bottom: 5px; }
            .section { margin-bottom: 30px; }
            .section h2 { font-size: 16pt; font-weight: bold; color: #1f2937; margin-bottom: 15px; border-bottom: 1px solid #e5e7eb; padding-bottom: 5px; }
            .info-table { width: 100%; border-collapse: collapse; margin: 15px 0; }
            .info-table th, .info-table td { border: 1px solid #d1d5db; padding: 8px; text-align: left; }
            .info-table th { background-color: #f9fafb; font-weight: bold; width: 25%; }
            .content-box { background: #f8fafc; padding: 15px; margin: 10px 0; border-left: 4px solid #2563eb; }
            .platform-section { margin-bottom: 20px; }
            .platform-section h3 { font-size: 14pt; font-weight: bold; color: #2563eb; margin-bottom: 8px; }
            .platform-output { background: #f8fafc; padding: 15px; border-left: 4px solid #10b981; margin-bottom: 15px; }
            .page-break { page-break-before: always; }
            .footer { position: fixed; bottom: 0; width: 100%; text-align: center; font-size: 10pt; color: #666; }
        </style>
    </head>
    <body>
        <div class="header">
            <div class="title">NewsJack Content Export</div>
            <div class="subtitle">Campaign: ${campaign.campaignName}</div>
            <div class="subtitle">Generated: ${formatDate(new Date())}</div>
        </div>

        <div class="section">
            <h2>News Item Information</h2>
            <table class="info-table">
                <tr><th>Headline</th><td>${newsItem.headline}</td></tr>
                <tr><th>Source URL</th><td>${newsItem.sourceUrl}</td></tr>
                <tr><th>Content Type</th><td>${newsItem.contentType}</td></tr>
                <tr><th>Status</th><td>${newsItem.status}</td></tr>
                <tr><th>Created</th><td>${formatDate(newsItem.createdAt)}</td></tr>
                <tr><th>Updated</th><td>${formatDate(newsItem.updatedAt)}</td></tr>
            </table>
        </div>

        <div class="section">
            <h2>Original Content</h2>
            <div class="content-box">${newsItem.content || 'No content available'}</div>
        </div>

        <div class="page-break">
            <h2>NewsJack Platform Content</h2>
            ${platformContent || '<p>No platform content generated yet.</p>'}
        </div>

        ${metricsContent}

        <div class="footer">
            Generated by NewsGlue • ${new Date().toLocaleString()}
        </div>
    </body>
    </html>
  `;
};

// Generate Campaign Dossier HTML content
const generateCampaignDossierHTML = (campaign: any, newsItemsData: any[], channels: any[]) => {
  // Generate Module 1 - Campaign Builder section with actual data
  const campaignBuilderContent = `
    <div class="section" id="module1">
      <h2>Module 1: Campaign Configuration</h2>
      <table class="info-table">
        <tr><th>Campaign Name</th><td>${campaign.campaignName || campaign.name || 'Not provided'}</td></tr>
        <tr><th>Website URL</th><td>${campaign.websiteUrl ? `<a href="${campaign.websiteUrl}" target="_blank">${campaign.websiteUrl}</a>` : 'Not provided'}</td></tr>
        <tr><th>Call-to-Action URL</th><td>${campaign.ctaUrl ? `<a href="${campaign.ctaUrl}" target="_blank">${campaign.ctaUrl}</a>` : 'Not provided'}</td></tr>
        <tr><th>Emotional Objective</th><td>${campaign.emotionalObjective || 'Not provided'}</td></tr>
        <tr><th>Audience Pain Points</th><td>${campaign.audiencePain || 'Not provided'}</td></tr>
        <tr><th>Additional Context</th><td>${campaign.additionalData || 'Not provided'}</td></tr>
        <tr><th>Website Analysis</th><td>${campaign.websiteAnalysis || 'Not analyzed yet'}</td></tr>
        <tr><th>Campaign Status</th><td><span class="status-${campaign.status || 'active'}">${(campaign.status || 'Active').charAt(0).toUpperCase() + (campaign.status || 'Active').slice(1)}</span></td></tr>
        <tr><th>Created Date</th><td>${formatDate(campaign.createdAt)}</td></tr>
        <tr><th>Last Updated</th><td>${formatDate(campaign.updatedAt || campaign.createdAt)}</td></tr>
      </table>
    </div>
  `;

  // Generate Module 2 - Social Channel Settings section with actual socialSettings data
  const socialSettings = campaign.socialSettings || {};
  const channelConfig = socialSettings.channelConfig || {};
  const apiEnabled = socialSettings.apiEnabled || false;
  
  let channelsContent = '';
  
  // Get active channels from both channels table and socialSettings
  const activeChannels = new Set();
  if (channels && channels.length > 0) {
    channels.forEach(ch => activeChannels.add(ch.platform));
  }
  Object.keys(channelConfig).forEach(platform => activeChannels.add(platform));
  
  if (activeChannels.size > 0) {
    const channelsRows = Array.from(activeChannels).map(platform => {
      const channelData = channels.find(ch => ch.platform === platform);
      const config = channelConfig[platform] || {};
      const enabled = channelData?.enabled !== undefined ? (channelData.enabled ? 'Enabled' : 'Disabled') : 'Configured';
      const tone = config.tone || 'Default';
      const wordCount = config.wordCount || 'Not set';
      const contentRatio = config.contentRatio || 'Not set';
      
      return `
        <tr>
          <td><strong>${platform.charAt(0).toUpperCase() + platform.slice(1)}</strong></td>
          <td><span class="status-${enabled.toLowerCase()}">${enabled}</span></td>
          <td>${tone}</td>
          <td>${wordCount}${typeof wordCount === 'number' ? ' words' : ''}</td>
          <td>${contentRatio}</td>
        </tr>
      `;
    }).join('');
    
    channelsContent = `
      <div class="section" id="module2">
        <h2>Module 2: Social Channel Strategy</h2>
        <table class="info-table">
          <tr>
            <th>Platform</th>
            <th>Status</th>
            <th>Brand Tone</th>
            <th>Word Count</th>
            <th>Content Ratio</th>
          </tr>
          ${channelsRows}
        </table>
        
        <div class="subsection">
          <h4>API Configuration:</h4>
          <p><strong>API Integration:</strong> ${apiEnabled ? 'Enabled' : 'Disabled'}</p>
          <p><strong>Thumbnail Settings:</strong> ${socialSettings.thumbnailOrder ? Object.keys(socialSettings.thumbnailOrder).length + ' platforms configured' : 'Default settings'}</p>
        </div>
        
        <div class="subsection">
          <h4>Platform-Specific Configuration:</h4>
          ${Array.from(activeChannels).map(platform => {
            const config = channelConfig[platform];
            if (config && config.enabled !== false) {
              return `
                <div class="platform-notes">
                  <strong>${platform.charAt(0).toUpperCase() + platform.slice(1)}:</strong>
                  <p>Tone: ${config.tone || 'Default'} | Word Count: ${config.wordCount || 'Not set'} | Content Mix: ${config.contentRatio || 'Not set'}</p>
                </div>
              `;
            }
            return '';
          }).join('')}
        </div>
      </div>
    `;
  } else {
    channelsContent = '<p>No social platforms configured</p>';
  }

  // Generate Module 6 - NewsJack Analytics and Performance section
  let newsItemsContent = '';
  let performanceMetrics = {
    totalNewsItems: newsItemsData?.length || 0,
    totalPlatformOutputs: 0,
    avgGenerationTime: 0,
    totalWordCount: 0,
    humanTimeEstimate: 0
  };

  if (newsItemsData && newsItemsData.length > 0) {
    let totalGenerationTime = 0;
    let totalItems = 0;
    
    newsItemsContent = newsItemsData.map((item, index) => {
      let platformOutputsHTML = '';
      let itemMetricsHTML = '';
      const platformOutputs = item.platformOutputs || {};
      const metrics = item.generationMetrics || {};
      
      // Calculate metrics for this item
      const platformCount = Object.keys(platformOutputs).length;
      performanceMetrics.totalPlatformOutputs += platformCount;
      
      // Extract generation metrics
      const generationTime = metrics.generationDuration || metrics.duration || 0;
      const aiModel = metrics.model || metrics.aiModel || 'GPT-4o';
      const wordCount = metrics.totalWordCount || 0;
      
      if (generationTime) {
        totalGenerationTime += generationTime;
        totalItems++;
      }
      
      performanceMetrics.totalWordCount += wordCount;
      performanceMetrics.humanTimeEstimate += (platformCount * 15); // 15 min per platform estimate
      
      // Generate platform content with metrics
      if (Object.keys(platformOutputs).length > 0) {
        platformOutputsHTML = `
          <div class="subsection">
            <h4>📊 NewsJack Platform Outputs:</h4>
            ${Object.entries(platformOutputs).map(([platform, contentData]: [string, any]) => {
              if (contentData && typeof contentData === 'object') {
                const content = contentData.content || contentData;
                const contentString = typeof content === 'string' ? content : JSON.stringify(content);
                const wordCount = contentString.split(' ').length;
                const cta = contentData.cta || 'Not specified';
                const ctaUrl = contentData.ctaUrl || 'Not specified';
                
                return `
                  <div class="platform-output">
                    <div class="platform-header">
                      <strong>${platform.charAt(0).toUpperCase() + platform.slice(1)} Content</strong>
                      <span class="word-count">${wordCount} words</span>
                    </div>
                    <div class="content-text">${contentString}</div>
                    <div class="cta-info">
                      <strong>CTA:</strong> ${cta}<br>
                      <strong>CTA URL:</strong> ${ctaUrl}
                    </div>
                  </div>
                `;
              }
              return '';
            }).join('')}
          </div>
        `;
      }
      
      // Generate comprehensive item-level metrics with benchmarks
      const humanTime = platformCount * 15; // 15 minutes per platform
      const humanAiTime = platformCount * 8; // 8 minutes with AI assistance
      const newsGlueTime = generationTime || 30; // Actual generation time
      const timeSaved = humanTime - (newsGlueTime / 60);
      const efficiencyGain = humanTime > 0 ? Math.round((timeSaved / humanTime) * 100) : 0;
      
      // Track actions taken (copy, edit, regenerate)
      const actionsData = metrics.actions || {};
      const copyActions = actionsData.copies || 0;
      const editActions = actionsData.edits || 0;
      const regenActions = actionsData.regenerations || 0;
      
      itemMetricsHTML = `
        <div class="subsection">
          <h4>⚡ Generation Performance Metrics:</h4>
          <table class="metrics-table">
            <tr><th>AI Model Used</th><td>${aiModel}</td></tr>
            <tr><th>Generation Time</th><td>${generationTime ? `${generationTime}s` : 'Not recorded'}</td></tr>
            <tr><th>Total Word Count</th><td>${wordCount || 'Not calculated'}</td></tr>
            <tr><th>Platform Outputs</th><td>${platformCount}</td></tr>
            <tr><th>Character Variance</th><td>${metrics.characterVariance || 'Not calculated'}</td></tr>
          </table>
          
          <h4>🏁 Time Benchmarks:</h4>
          <table class="metrics-table">
            <tr><th>Human Time (Est.)</th><td>${humanTime} minutes</td></tr>
            <tr><th>Human + AI Time (Est.)</th><td>${humanAiTime} minutes</td></tr>
            <tr><th>NewsGlue Time (Actual)</th><td>${(newsGlueTime / 60).toFixed(1)} minutes</td></tr>
            <tr><th>Time Saved</th><td>${timeSaved.toFixed(1)} minutes (${efficiencyGain}% efficiency)</td></tr>
          </table>
          
          <h4>📊 User Actions Taken:</h4>
          <table class="metrics-table">
            <tr><th>Copy Actions</th><td>${copyActions}</td></tr>
            <tr><th>Edit Actions</th><td>${editActions}</td></tr>
            <tr><th>Regenerate Actions</th><td>${regenActions}</td></tr>
            <tr><th>Total Interactions</th><td>${copyActions + editActions + regenActions}</td></tr>
          </table>
        </div>
      `;

      return `
        <div class="news-item">
          <h3>${index + 1}. ${item.headline}</h3>
          <table class="info-table">
            <tr><th>Source URL</th><td><a href="${item.sourceUrl}" target="_blank">${item.sourceUrl}</a></td></tr>
            <tr><th>Status</th><td><span class="status-${item.status}">${item.status}</span></td></tr>
            <tr><th>Content Type</th><td>${item.contentType}</td></tr>
            <tr><th>Created</th><td>${formatDate(item.createdAt)}</td></tr>
            <tr><th>Last Updated</th><td>${formatDate(item.updatedAt)}</td></tr>
          </table>
          
          <div class="original-content">
            <h4>📰 Original News Content:</h4>
            <div class="content-text">${item.content || 'No content available'}</div>
          </div>
          
          ${platformOutputsHTML}
          ${itemMetricsHTML}
        </div>
      `;
    }).join('');
    
    // Calculate overall averages
    if (totalItems > 0) {
      performanceMetrics.avgGenerationTime = totalGenerationTime / totalItems;
    }
  } else {
    newsItemsContent = `
      <div class="empty-state">
        <h4>No NewsJack Content Generated</h4>
        <p>This campaign doesn't have any news items or generated content yet.</p>
      </div>
    `;
  }
  
  // Generate Performance Benchmark Panel
  const performanceBenchmarkHTML = `
    <div class="section">
      <h2>📈 Performance Benchmark Report</h2>
      <div class="benchmark-grid">
        <div class="benchmark-card">
          <h4>Content Generation</h4>
          <div class="metric-large">${performanceMetrics.totalNewsItems}</div>
          <div class="metric-label">News Items Processed</div>
        </div>
        <div class="benchmark-card">
          <h4>Platform Outputs</h4>
          <div class="metric-large">${performanceMetrics.totalPlatformOutputs}</div>
          <div class="metric-label">Total Platform Contents</div>
        </div>
        <div class="benchmark-card">
          <h4>AI Efficiency</h4>
          <div class="metric-large">${performanceMetrics.avgGenerationTime.toFixed(1)}s</div>
          <div class="metric-label">Avg Generation Time</div>
        </div>
        <div class="benchmark-card">
          <h4>Time Savings</h4>
          <div class="metric-large">${Math.round(performanceMetrics.humanTimeEstimate / 60)}h</div>
          <div class="metric-label">Est. Human Time Saved</div>
        </div>
      </div>
      <div class="efficiency-summary">
        <h4>🎯 Efficiency Summary</h4>
        <p><strong>Total Word Count Generated:</strong> ${performanceMetrics.totalWordCount.toLocaleString()} words</p>
        <p><strong>AI vs Human Time:</strong> AI completed in ${performanceMetrics.avgGenerationTime.toFixed(1)}s what would take humans ~${performanceMetrics.humanTimeEstimate} minutes</p>
        <p><strong>Efficiency Multiplier:</strong> ${performanceMetrics.humanTimeEstimate > 0 ? `${Math.round((performanceMetrics.humanTimeEstimate * 60) / performanceMetrics.avgGenerationTime)}x faster` : 'Calculating...'}</p>
      </div>
    </div>
  `;

  return `
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <title>Campaign Dossier - ${campaign.campaignName}</title>
        <style>
            @page { size: A4; margin: 1cm; }
            body { font-family: 'Open Sans', Arial, sans-serif; font-size: 11pt; line-height: 1.4; color: #333; }
            .header { text-align: center; margin-bottom: 40px; border-bottom: 3px solid #2563eb; padding-bottom: 20px; }
            .title { font-size: 28pt; font-weight: bold; color: #2563eb; margin-bottom: 15px; }
            .campaign-title { font-size: 20pt; font-weight: bold; color: #1f2937; margin-bottom: 15px; }
            .subtitle { font-size: 14pt; color: #666; margin-bottom: 8px; }
            .section { margin-bottom: 40px; }
            .section h2 { font-size: 18pt; font-weight: bold; color: #1f2937; margin-bottom: 20px; border-bottom: 2px solid #e5e7eb; padding-bottom: 8px; }
            .subsection { margin: 20px 0; }
            .subsection h4 { font-size: 12pt; font-weight: bold; color: #374151; margin-bottom: 10px; }
            .info-table { width: 100%; border-collapse: collapse; margin: 15px 0; }
            .info-table th, .info-table td { border: 1px solid #d1d5db; padding: 10px; text-align: left; }
            .info-table th { background-color: #f9fafb; font-weight: bold; width: 30%; }
            .metrics-table { width: 100%; border-collapse: collapse; margin: 10px 0; }
            .metrics-table th, .metrics-table td { border: 1px solid #e5e7eb; padding: 8px; text-align: left; }
            .metrics-table th { background-color: #f3f4f6; font-weight: bold; }
            .news-item { margin-bottom: 30px; padding: 20px; border: 1px solid #e5e7eb; border-radius: 8px; page-break-inside: avoid; }
            .news-item h3 { font-size: 14pt; font-weight: bold; color: #2563eb; margin-bottom: 15px; }
            .platform-output { margin: 15px 0; padding: 15px; background-color: #f9fafb; border-left: 4px solid #2563eb; }
            .platform-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px; }
            .word-count { font-size: 10pt; color: #666; background-color: #e5e7eb; padding: 2px 8px; border-radius: 12px; }
            .content-text { margin: 10px 0; padding: 10px; background-color: #fff; border: 1px solid #e5e7eb; border-radius: 4px; white-space: pre-wrap; }
            .cta-info { margin-top: 10px; font-size: 10pt; color: #666; }
            .original-content { margin: 15px 0; }
            .benchmark-grid { display: grid; grid-template-columns: repeat(4, 1fr); gap: 15px; margin: 20px 0; }
            .benchmark-card { text-align: center; padding: 15px; border: 1px solid #e5e7eb; border-radius: 8px; background-color: #f9fafb; }
            .benchmark-card h4 { font-size: 10pt; margin-bottom: 8px; color: #374151; }
            .metric-large { font-size: 24pt; font-weight: bold; color: #2563eb; margin-bottom: 5px; }
            .metric-label { font-size: 9pt; color: #6b7280; }
            .efficiency-summary { margin: 20px 0; padding: 15px; background-color: #f0f9ff; border: 1px solid #bae6fd; border-radius: 8px; }
            .empty-state { text-align: center; padding: 40px; color: #6b7280; }
            .status-active { color: #059669; font-weight: bold; }
            .status-draft { color: #d97706; font-weight: bold; }
            .status-archived { color: #6b7280; font-weight: bold; }
            .page-break { page-break-before: always; }
            .footer { text-align: center; margin-top: 40px; padding-top: 20px; border-top: 1px solid #e5e7eb; font-size: 10pt; color: #6b7280; }
            .cover-page { height: 100vh; display: flex; flex-direction: column; justify-content: center; align-items: center; text-align: center; page-break-after: always; }
            .cover-title { font-size: 36pt; font-weight: bold; color: #2563eb; margin-bottom: 20px; }
            .cover-subtitle { font-size: 24pt; color: #1f2937; margin-bottom: 40px; }
            .cover-date { font-size: 14pt; color: #6b7280; }
            a { color: #2563eb; text-decoration: none; }
            a:hover { text-decoration: underline; }
            .news-item h3 { font-size: 12pt; font-weight: bold; color: #2563eb; margin-bottom: 15px; }
            .platform-output { background: #f8fafc; padding: 12px; margin: 8px 0; border-left: 4px solid #10b981; }
            .platform-output strong { color: #059669; }
            .content-text { margin-top: 5px; font-style: italic; }
            .page-break { page-break-before: always; }
            .footer { position: fixed; bottom: 0; width: 100%; text-align: center; font-size: 10pt; color: #666; }
            .toc { background: #f9fafb; padding: 20px; margin: 20px 0; border-radius: 8px; }
            .toc h3 { margin-bottom: 15px; color: #1f2937; }
            .toc ul { list-style: none; padding: 0; }
            .toc li { margin-bottom: 8px; }
            .toc a { text-decoration: none; color: #2563eb; }
        </style>
    </head>
    <body>
        <div class="header">
            <div class="title">Campaign Dossier</div>
            <div class="campaign-title">${campaign.campaignName}</div>
            <div class="subtitle">Prepared: ${formatDate(new Date())}</div>
            <div class="subtitle">Campaign Created: ${formatDate(campaign.createdAt)}</div>
        </div>

        <!-- Cover Page -->
        <div class="cover-page">
            <div class="cover-title">Campaign Dossier</div>
            <div class="cover-subtitle">${campaign.campaignName}</div>
            <div class="cover-date">Generated: ${formatDate(new Date())}</div>
            <div class="cover-company">Powered by NewsGlue Platform</div>
        </div>

        <!-- Table of Contents -->
        <div class="page-break">
            <div class="toc">
                <h3>Table of Contents</h3>
                <div class="toc-item"><a href="#module1">Module 1: Campaign Configuration</a></div>
                <div class="toc-item"><a href="#module2">Module 2: Social Channel Strategy</a></div>
                <div class="toc-item"><a href="#module6">Module 6: NewsJack Content & Analytics</a></div>
                <div class="toc-item"><a href="#performance">Performance Benchmark Report</a></div>
            </div>
        </div>

        ${campaignBuilderContent}

        <div class="page-break">
            ${channelsContent}
        </div>

        <div class="page-break">
            <div class="section" id="module6">
                <h2>Module 6: NewsJack Content & Analytics</h2>
                ${newsItemsContent}
            </div>
        </div>

        <div class="page-break">
            <div id="performance">
                ${performanceBenchmarkHTML}
            </div>
        </div>

        <div class="footer">
            Generated by NewsGlue Campaign Dossier System • ${new Date().toLocaleString()}
        </div>
    </body>
    </html>
  `;
};

// Simple HTML to PDF conversion function
const generateHTMLContent = (title: string, content: string) => {
  return `
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>${title}</title>
    <style>
        @page { size: A4; margin: 1cm; }
        body { font-family: Arial, sans-serif; margin: 20px; line-height: 1.6; color: #333; }
        .header { text-align: center; margin-bottom: 30px; border-bottom: 2px solid #2563eb; padding-bottom: 20px; }
        .section { margin-bottom: 30px; }
        .platform-output { background: #f8fafc; padding: 15px; margin: 10px 0; border-left: 4px solid #2563eb; }
        .footer { text-align: center; margin-top: 50px; font-size: 12px; color: #666; }
        table { width: 100%; border-collapse: collapse; margin: 15px 0; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
    </style>
</head>
<body>
    <div class="header">
        <h1>${title}</h1>
        <p>Generated by NewsGlue - ${new Date().toLocaleDateString()}</p>
    </div>
    ${content}
    <div class="footer">
        <p>Generated by NewsGlue</p>
    </div>
</body>
</html>`;
};

// Generate NewsJack PDF for a specific news item
router.get('/newsjack/:newsItemId', requireAuth, async (req, res) => {
  try {
    const { newsItemId } = req.params;
    
    // Fetch news item with platform outputs
    const newsItem = await db.query.newsItems.findFirst({
      where: eq(newsItems.id, parseInt(newsItemId))
    });

    if (!newsItem) {
      return res.status(404).json({ error: 'News item not found' });
    }

    // Fetch campaign details
    const campaign = await db.query.campaigns.findFirst({
      where: eq(campaigns.id, newsItem.campaignId)
    });

    // Generate HTML content for the PDF
    let platformOutputsHTML = '';
    Object.entries(newsItem.platformOutputs || {}).forEach(([platform, output]: [string, any]) => {
      platformOutputsHTML += `
        <div class="platform-output">
          <h3>${platform.toUpperCase()} Output</h3>
          <table>
            <tr><th>Content</th><td><div class="monospace">${output.content || 'N/A'}</div></td></tr>
            <tr><th>Word Count</th><td>${output.content ? output.content.split(/\s+/).length : 0} words</td></tr>
            <tr><th>Character Count</th><td>${output.content ? output.content.length : 0} characters</td></tr>
            <tr><th>Hashtags</th><td>${output.hashtags ? output.hashtags.map((tag: string) => '#' + tag).join(' ') : 'None'}</td></tr>
            <tr><th>CTA</th><td>${output.cta || 'N/A'}</td></tr>
            <tr><th>CTA URL</th><td>${output.ctaUrl || 'N/A'}</td></tr>
            <tr><th>Estimated Engagement</th><td>${output.metrics?.estimatedEngagement || 'N/A'}</td></tr>
            <tr><th>News Focus</th><td>${output.metrics?.newsPercentage ? `${output.metrics.newsPercentage}%` : 'N/A'}</td></tr>
            <tr><th>Campaign Focus</th><td>${output.metrics?.campaignPercentage ? `${output.metrics.campaignPercentage}%` : 'N/A'}</td></tr>
          </table>
        </div>
      `;
    });

    const contentHTML = `
      <div class="section">
        <h2>News Item Information</h2>
        <table>
          <tr><th>Headline</th><td>${newsItem.headline || 'N/A'}</td></tr>
          <tr><th>Source URL</th><td><a href="${newsItem.sourceUrl || '#'}">${newsItem.sourceUrl || 'N/A'}</a></td></tr>
          <tr><th>Date</th><td>${formatDate(newsItem.createdAt)}</td></tr>
          <tr><th>Campaign</th><td>${campaign?.campaignName || 'N/A'}</td></tr>
        </table>
      </div>
      
      <div class="section">
        <h2>Platform Outputs</h2>
        ${platformOutputsHTML}
      </div>
    `;

    const htmlContent = generateHTMLContent('NewsJack Content Report', contentHTML);
    
    res.setHeader('Content-Type', 'text/html');
    res.setHeader('Content-Disposition', `attachment; filename="newsjack-${newsItemId}-${Date.now()}.html"`);
    res.send(htmlContent);

  } catch (error) {
    console.error('PDF generation error:', error);
    res.status(500).json({ error: 'Failed to generate PDF' });
  }
});

// Generate Campaign Dossier PDF
router.get('/campaign-dossier/:campaignId', requireAuth, async (req, res) => {
  try {
    const { campaignId } = req.params;
    const userId = req.user!.id;
    
    // Fetch campaign details with ownership verification
    const campaign = await db.query.campaigns.findFirst({
      where: and(
        eq(campaigns.id, campaignId),
        eq(campaigns.userId, userId)
      ),
      with: {
        channels: true
      }
    });

    if (!campaign) {
      return res.status(404).json({ error: 'Campaign not found' });
    }

    // Fetch all news items for this campaign
    const campaignNewsItems = await db.query.newsItems.findMany({
      where: eq(newsItems.campaignId, campaignId),
      orderBy: (newsItems, { desc }) => [desc(newsItems.createdAt)]
    });

    // Fetch campaign channels for Module 2 data
    const channelsData = await db.select().from(campaignChannels).where(eq(campaignChannels.campaignId, campaignId));

    // Calculate metrics
    const totalNewsItems = campaignNewsItems.length;
    const totalOutputs = campaignNewsItems.reduce((acc, item) => {
      return acc + Object.keys(item.platformOutputs || {}).length;
    }, 0);
    const draftCount = campaignNewsItems.filter(item => item.status === 'draft').length;
    const publishedCount = campaignNewsItems.filter(item => item.status === 'active').length;

    // Generate news items HTML
    let newsItemsHTML = '';
    campaignNewsItems.forEach((item, index) => {
      let platformOutputsHTML = '';
      Object.entries(item.platformOutputs || {}).forEach(([platform, output]: [string, any]) => {
        platformOutputsHTML += `
          <div class="subsection">
            <h4>${platform.toUpperCase()}:</h4>
            <div class="monospace">${output.content || 'No content generated'}</div>
          </div>
        `;
      });

      newsItemsHTML += `
        <div class="subsection">
          <h3>${index + 1}. ${item.headline}</h3>
          <table>
            <tr><th>Source</th><td><a href="${item.sourceUrl || '#'}">${item.sourceUrl || 'N/A'}</a></td></tr>
            <tr><th>Status</th><td>${item.status || 'draft'}</td></tr>
          </table>
          ${platformOutputsHTML}
        </div>
      `;
    });

    const contentHTML = `
      <div class="section">
        <h2>Cover Page</h2>
        <table>
          <tr><th>Campaign Name</th><td>${campaign.campaignName || 'N/A'}</td></tr>
          <tr><th>Date Created</th><td>${formatDate(campaign.createdAt)}</td></tr>
          <tr><th>Operator</th><td>${req.user?.username || 'NewsGlue User'}</td></tr>
        </table>
      </div>

      <div class="section">
        <h2>1. Campaign Strategy</h2>
        <table>
          <tr><th>Audience Pain</th><td>${campaign.audiencePain || 'Not specified'}</td></tr>
          <tr><th>Emotional Objective</th><td>${campaign.emotionalObjective || 'Not specified'}</td></tr>
          <tr><th>Website URL</th><td><a href="${campaign.websiteUrl || '#'}">${campaign.websiteUrl || 'Not specified'}</a></td></tr>
          <tr><th>CTA URL</th><td><a href="${campaign.ctaUrl || '#'}">${campaign.ctaUrl || 'Not specified'}</a></td></tr>
        </table>
      </div>

      <div class="section">
        <h2>2. Channel Configuration</h2>
        <div class="subsection">
          ${campaign.socialSettings ? 
            Object.entries(campaign.socialSettings as any).map(([platform, settings]: [string, any]) => 
              `<p><strong>${platform.toUpperCase()}:</strong> ${settings.enabled ? 'Enabled' : 'Disabled'} | Tone: ${settings.tone || 'Default'} | News Ratio: ${settings.newsRatio || 50}%</p>`
            ).join('') : 
            '<p>No channel configuration specified</p>'
          }
        </div>
      </div>

      <div class="section">
        <h2>3. News Items & Generated Content</h2>
        ${newsItemsHTML}
      </div>

      <div class="section">
        <h2>4. Metrics Snapshot</h2>
        <div class="metrics">
          <div class="metric-box">
            <h4>Total News Items Processed</h4>
            <p>${totalNewsItems}</p>
          </div>
          <div class="metric-box">
            <h4>Total Platform Outputs Generated</h4>
            <p>${totalOutputs}</p>
          </div>
          <div class="metric-box">
            <h4>Draft Items</h4>
            <p>${draftCount}</p>
          </div>
          <div class="metric-box">
            <h4>Published Items</h4>
            <p>${publishedCount}</p>
          </div>
          <div class="metric-box">
            <h4>Average Outputs per News Item</h4>
            <p>${totalNewsItems > 0 ? (totalOutputs / totalNewsItems).toFixed(1) : '0'}</p>
          </div>
          <div class="metric-box">
            <h4>Campaign Completion</h4>
            <p>${totalNewsItems > 0 ? Math.round((publishedCount / totalNewsItems) * 100) : 0}%</p>
          </div>
        </div>
      </div>
    `;

    // Use the enhanced generator function for comprehensive content
    const htmlContent = generateCampaignDossierHTML(campaign, campaignNewsItems, channelsData || []);
    
    // Format filename as specified: campaign-dossier-[campaign-name]-[date].pdf
    const campaignSlug = campaign.campaignName.replace(/[^a-zA-Z0-9]/g, '-').toLowerCase();
    const dateSlug = new Date().toISOString().split('T')[0];
    const filename = `campaign-dossier-${campaignSlug}-${dateSlug}.html`;
    
    res.setHeader('Content-Type', 'text/html');
    res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
    res.send(htmlContent);

  } catch (error) {
    console.error('Campaign PDF generation error:', error);
    res.status(500).json({ error: 'Failed to generate campaign dossier PDF' });
  }
});

// Add route alias for the button that calls /api/pdf/dossier/
router.get('/dossier/:campaignId', requireAuth, async (req, res) => {
  try {
    const { campaignId } = req.params;
    const userId = req.user!.id;
    
    // Fetch campaign details with ownership verification
    const campaign = await db.query.campaigns.findFirst({
      where: and(
        eq(campaigns.id, campaignId),
        eq(campaigns.userId, userId)
      )
    });

    if (!campaign) {
      return res.status(404).json({ error: 'Campaign not found' });
    }

    // Fetch all news items for this campaign
    const campaignNewsItems = await db.query.newsItems.findMany({
      where: eq(newsItems.campaignId, campaignId),
      orderBy: (newsItems, { desc }) => [desc(newsItems.createdAt)]
    });

    // Fetch campaign channels for Module 2 data
    const channels = await db.query.campaignChannels.findMany({
      where: eq(campaignChannels.campaignId, campaignId)
    });

    // Debug log to see what data we're working with
    console.log('Campaign Dossier Debug:', {
      campaignId,
      campaignName: campaign.campaignName,
      websiteUrl: campaign.websiteUrl,
      ctaUrl: campaign.ctaUrl,
      emotionalObjective: campaign.emotionalObjective,
      audiencePain: campaign.audiencePain,
      socialSettings: campaign.socialSettings,
      channelsData: channels.length,
      newsItems: campaignNewsItems.length
    });

    // Generate comprehensive HTML content using enhanced generator
    const htmlContent = generateCampaignDossierHTML(campaign, campaignNewsItems, channels || []);
    
    // Format filename as specified: campaign-dossier-[campaign-name]-[date].html
    const campaignSlug = campaign.campaignName.replace(/[^a-zA-Z0-9]/g, '-').toLowerCase();
    const dateSlug = new Date().toISOString().split('T')[0];
    const filename = `campaign-dossier-${campaignSlug}-${dateSlug}.html`;
    
    res.setHeader('Content-Type', 'text/html');
    res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
    res.send(htmlContent);

  } catch (error) {
    console.error('Campaign dossier generation error:', error);
    res.status(500).json({ error: 'Failed to generate campaign dossier' });
  }
});

// GET /api/pdf/newsjack/:newsItemId - Generate NewsJack PDF
router.get('/newsjack/:newsItemId', requireAuth, async (req, res) => {
  try {
    const newsItemId = parseInt(req.params.newsItemId);
    const userId = req.user!.id;

    // Fetch news item with campaign info
    const newsItem = await db.query.newsItems.findFirst({
      where: eq(newsItems.id, newsItemId),
      with: {
        campaign: true
      }
    });

    if (!newsItem) {
      return res.status(404).json({ error: 'News item not found' });
    }

    // Verify user has access to this campaign
    if (newsItem.campaign.userId !== userId) {
      return res.status(403).json({ error: 'Access denied' });
    }

    // Generate HTML content for NewsJack
    const htmlContent = generateNewsJackHTML(newsItem, newsItem.campaign);

    // Set response headers for HTML download that can be printed as PDF
    const filename = `newsjack-${newsItem.headline.replace(/[^a-zA-Z0-9]/g, '-')}-${Date.now()}.html`;
    res.setHeader('Content-Type', 'text/html');
    res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
    res.send(htmlContent);

  } catch (error) {
    console.error('NewsJack PDF generation error:', error);
    res.status(500).json({ error: 'Failed to generate NewsJack PDF' });
  }
});

export default router;