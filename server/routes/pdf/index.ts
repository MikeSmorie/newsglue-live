import { Router } from 'express';
import { db } from '../../../db/index.js';
import { campaigns, newsItems } from '../../../db/schema.js';
import { eq } from 'drizzle-orm';

// Simple auth middleware
const requireAuth = (req: any, res: any, next: any) => {
  if (req.isAuthenticated()) return next();
  res.status(401).json({ message: "Not authenticated" });
};

const router = Router();

// Helper function to format date
const formatDate = (date: Date | string | null) => {
  if (!date) return 'N/A';
  return new Date(date).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
};

// Simple HTML to PDF conversion function
const generateHTMLContent = (title: string, content: string) => {
  return `
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>${title}</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
        .header { text-align: center; margin-bottom: 30px; border-bottom: 2px solid #333; padding-bottom: 20px; }
        .section { margin-bottom: 30px; }
        .subsection { margin-left: 20px; margin-bottom: 20px; }
        .platform-output { background: #f5f5f5; padding: 15px; margin: 10px 0; border-left: 4px solid #2563eb; }
        .metrics { display: grid; grid-template-columns: 1fr 1fr; gap: 20px; }
        .metric-box { background: #f9f9f9; padding: 15px; border: 1px solid #ddd; }
        .footer { text-align: center; margin-top: 50px; font-size: 12px; color: #666; }
        table { width: 100%; border-collapse: collapse; margin: 15px 0; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
        .monospace { font-family: monospace; background: #f8f8f8; padding: 5px; }
    </style>
</head>
<body>
    <div class="header">
        <h1>${title}</h1>
        <p>Generated by NewsGlue - ${new Date().toLocaleDateString()}</p>
    </div>
    ${content}
    <div class="footer">
        <p>Generated by NewsGlue</p>
    </div>
</body>
</html>`;
};

// Generate NewsJack PDF for a specific news item
router.get('/newsjack/:newsItemId', requireAuth, async (req, res) => {
  try {
    const { newsItemId } = req.params;
    
    // Fetch news item with platform outputs
    const newsItem = await db.query.newsItems.findFirst({
      where: eq(newsItems.id, parseInt(newsItemId))
    });

    if (!newsItem) {
      return res.status(404).json({ error: 'News item not found' });
    }

    // Fetch campaign details
    const campaign = await db.query.campaigns.findFirst({
      where: eq(campaigns.id, newsItem.campaignId)
    });

    // Generate HTML content for the PDF
    let platformOutputsHTML = '';
    Object.entries(newsItem.platformOutputs || {}).forEach(([platform, output]: [string, any]) => {
      platformOutputsHTML += `
        <div class="platform-output">
          <h3>${platform.toUpperCase()} Output</h3>
          <table>
            <tr><th>Content</th><td><div class="monospace">${output.content || 'N/A'}</div></td></tr>
            <tr><th>Word Count</th><td>${output.content ? output.content.split(/\s+/).length : 0} words</td></tr>
            <tr><th>Character Count</th><td>${output.content ? output.content.length : 0} characters</td></tr>
            <tr><th>Hashtags</th><td>${output.hashtags ? output.hashtags.map((tag: string) => '#' + tag).join(' ') : 'None'}</td></tr>
            <tr><th>CTA</th><td>${output.cta || 'N/A'}</td></tr>
            <tr><th>CTA URL</th><td>${output.ctaUrl || 'N/A'}</td></tr>
            <tr><th>Estimated Engagement</th><td>${output.metrics?.estimatedEngagement || 'N/A'}</td></tr>
            <tr><th>News Focus</th><td>${output.metrics?.newsPercentage ? `${output.metrics.newsPercentage}%` : 'N/A'}</td></tr>
            <tr><th>Campaign Focus</th><td>${output.metrics?.campaignPercentage ? `${output.metrics.campaignPercentage}%` : 'N/A'}</td></tr>
          </table>
        </div>
      `;
    });

    const contentHTML = `
      <div class="section">
        <h2>News Item Information</h2>
        <table>
          <tr><th>Headline</th><td>${newsItem.headline || 'N/A'}</td></tr>
          <tr><th>Source URL</th><td><a href="${newsItem.sourceUrl || '#'}">${newsItem.sourceUrl || 'N/A'}</a></td></tr>
          <tr><th>Date</th><td>${formatDate(newsItem.createdAt)}</td></tr>
          <tr><th>Campaign</th><td>${campaign?.campaignName || 'N/A'}</td></tr>
        </table>
      </div>
      
      <div class="section">
        <h2>Platform Outputs</h2>
        ${platformOutputsHTML}
      </div>
    `;

    const htmlContent = generateHTMLContent('NewsJack Content Report', contentHTML);
    
    res.setHeader('Content-Type', 'text/html');
    res.setHeader('Content-Disposition', `attachment; filename="newsjack-${newsItemId}-${Date.now()}.html"`);
    res.send(htmlContent);

  } catch (error) {
    console.error('PDF generation error:', error);
    res.status(500).json({ error: 'Failed to generate PDF' });
  }
});

// Generate Campaign Dossier PDF
router.get('/campaign-dossier/:campaignId', requireAuth, async (req, res) => {
  try {
    const { campaignId } = req.params;
    
    // Fetch campaign details
    const campaign = await db.query.campaigns.findFirst({
      where: eq(campaigns.id, campaignId)
    });

    if (!campaign) {
      return res.status(404).json({ error: 'Campaign not found' });
    }

    // Fetch all news items for this campaign
    const campaignNewsItems = await db.query.newsItems.findMany({
      where: eq(newsItems.campaignId, campaignId)
    });

    // Calculate metrics
    const totalNewsItems = campaignNewsItems.length;
    const totalOutputs = campaignNewsItems.reduce((acc, item) => {
      return acc + Object.keys(item.platformOutputs || {}).length;
    }, 0);
    const draftCount = campaignNewsItems.filter(item => item.status === 'draft').length;
    const publishedCount = campaignNewsItems.filter(item => item.status === 'active').length;

    // Generate news items HTML
    let newsItemsHTML = '';
    campaignNewsItems.forEach((item, index) => {
      let platformOutputsHTML = '';
      Object.entries(item.platformOutputs || {}).forEach(([platform, output]: [string, any]) => {
        platformOutputsHTML += `
          <div class="subsection">
            <h4>${platform.toUpperCase()}:</h4>
            <div class="monospace">${output.content || 'No content generated'}</div>
          </div>
        `;
      });

      newsItemsHTML += `
        <div class="subsection">
          <h3>${index + 1}. ${item.headline}</h3>
          <table>
            <tr><th>Source</th><td><a href="${item.sourceUrl || '#'}">${item.sourceUrl || 'N/A'}</a></td></tr>
            <tr><th>Status</th><td>${item.status || 'draft'}</td></tr>
          </table>
          ${platformOutputsHTML}
        </div>
      `;
    });

    const contentHTML = `
      <div class="section">
        <h2>Cover Page</h2>
        <table>
          <tr><th>Campaign Name</th><td>${campaign.campaignName || 'N/A'}</td></tr>
          <tr><th>Date Created</th><td>${formatDate(campaign.createdAt)}</td></tr>
          <tr><th>Operator</th><td>${req.user?.username || 'NewsGlue User'}</td></tr>
        </table>
      </div>

      <div class="section">
        <h2>1. Campaign Strategy</h2>
        <table>
          <tr><th>Audience Pain</th><td>${campaign.audiencePain || 'Not specified'}</td></tr>
          <tr><th>Emotional Objective</th><td>${campaign.emotionalObjective || 'Not specified'}</td></tr>
          <tr><th>Website URL</th><td><a href="${campaign.websiteUrl || '#'}">${campaign.websiteUrl || 'Not specified'}</a></td></tr>
          <tr><th>CTA URL</th><td><a href="${campaign.ctaUrl || '#'}">${campaign.ctaUrl || 'Not specified'}</a></td></tr>
        </table>
      </div>

      <div class="section">
        <h2>2. Channel Configuration</h2>
        <div class="subsection">
          ${campaign.socialSettings ? 
            Object.entries(campaign.socialSettings as any).map(([platform, settings]: [string, any]) => 
              `<p><strong>${platform.toUpperCase()}:</strong> ${settings.enabled ? 'Enabled' : 'Disabled'} | Tone: ${settings.tone || 'Default'} | News Ratio: ${settings.newsRatio || 50}%</p>`
            ).join('') : 
            '<p>No channel configuration specified</p>'
          }
        </div>
      </div>

      <div class="section">
        <h2>3. News Items & Generated Content</h2>
        ${newsItemsHTML}
      </div>

      <div class="section">
        <h2>4. Metrics Snapshot</h2>
        <div class="metrics">
          <div class="metric-box">
            <h4>Total News Items Processed</h4>
            <p>${totalNewsItems}</p>
          </div>
          <div class="metric-box">
            <h4>Total Platform Outputs Generated</h4>
            <p>${totalOutputs}</p>
          </div>
          <div class="metric-box">
            <h4>Draft Items</h4>
            <p>${draftCount}</p>
          </div>
          <div class="metric-box">
            <h4>Published Items</h4>
            <p>${publishedCount}</p>
          </div>
          <div class="metric-box">
            <h4>Average Outputs per News Item</h4>
            <p>${totalNewsItems > 0 ? (totalOutputs / totalNewsItems).toFixed(1) : '0'}</p>
          </div>
          <div class="metric-box">
            <h4>Campaign Completion</h4>
            <p>${totalNewsItems > 0 ? Math.round((publishedCount / totalNewsItems) * 100) : 0}%</p>
          </div>
        </div>
      </div>
    `;

    const htmlContent = generateHTMLContent('Campaign Dossier', contentHTML);
    
    res.setHeader('Content-Type', 'text/html');
    res.setHeader('Content-Disposition', `attachment; filename="campaign-dossier-${campaignId}-${Date.now()}.html"`);
    res.send(htmlContent);

  } catch (error) {
    console.error('Campaign PDF generation error:', error);
    res.status(500).json({ error: 'Failed to generate campaign dossier PDF' });
  }
});

export default router;