import { Router } from 'express';
import { db } from '../../../db/index.js';
import { campaigns, newsItems, campaignChannels } from '../../../db/schema.js';
import { eq } from 'drizzle-orm';

// Simple auth middleware
const requireAuth = (req: any, res: any, next: any) => {
  if (req.isAuthenticated()) return next();
  res.status(401).json({ message: "Not authenticated" });
};

const router = Router();

// Helper function to format date
const formatDate = (date: Date | string | null) => {
  if (!date) return 'N/A';
  return new Date(date).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
};

// Generate NewsJack HTML content
const generateNewsJackHTML = (newsItem: any, campaign: any) => {
  const platformOutputs = newsItem.platformOutputs || {};
  const generationMetrics = newsItem.generationMetrics || {};
  
  let platformContent = '';
  const platforms = ['twitter', 'linkedin', 'instagram', 'facebook', 'tiktok'];
  platforms.forEach(platform => {
    if (platformOutputs[platform]) {
      platformContent += `
        <div class="platform-section">
          <h3>${platform.charAt(0).toUpperCase() + platform.slice(1)} Content</h3>
          <div class="platform-output">${platformOutputs[platform] || 'No content generated'}</div>
        </div>
      `;
    }
  });

  let metricsContent = '';
  if (Object.keys(generationMetrics).length > 0) {
    metricsContent = `
      <div class="page-break">
        <h2>Generation Metrics</h2>
        ${Object.entries(generationMetrics).map(([key, value]) => 
          `<p><strong>${key}:</strong> ${JSON.stringify(value)}</p>`
        ).join('')}
      </div>
    `;
  }

  return `
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <title>NewsJack Export - ${newsItem.headline}</title>
        <style>
            @page { size: A4; margin: 1cm; }
            body { font-family: 'Open Sans', Arial, sans-serif; font-size: 11pt; line-height: 1.4; color: #333; }
            .header { text-align: center; margin-bottom: 30px; border-bottom: 2px solid #2563eb; padding-bottom: 20px; }
            .title { font-size: 24pt; font-weight: bold; color: #2563eb; margin-bottom: 10px; }
            .subtitle { font-size: 14pt; color: #666; margin-bottom: 5px; }
            .section { margin-bottom: 30px; }
            .section h2 { font-size: 16pt; font-weight: bold; color: #1f2937; margin-bottom: 15px; border-bottom: 1px solid #e5e7eb; padding-bottom: 5px; }
            .info-table { width: 100%; border-collapse: collapse; margin: 15px 0; }
            .info-table th, .info-table td { border: 1px solid #d1d5db; padding: 8px; text-align: left; }
            .info-table th { background-color: #f9fafb; font-weight: bold; width: 25%; }
            .content-box { background: #f8fafc; padding: 15px; margin: 10px 0; border-left: 4px solid #2563eb; }
            .platform-section { margin-bottom: 20px; }
            .platform-section h3 { font-size: 14pt; font-weight: bold; color: #2563eb; margin-bottom: 8px; }
            .platform-output { background: #f8fafc; padding: 15px; border-left: 4px solid #10b981; margin-bottom: 15px; }
            .page-break { page-break-before: always; }
            .footer { position: fixed; bottom: 0; width: 100%; text-align: center; font-size: 10pt; color: #666; }
        </style>
    </head>
    <body>
        <div class="header">
            <div class="title">NewsJack Content Export</div>
            <div class="subtitle">Campaign: ${campaign.campaignName}</div>
            <div class="subtitle">Generated: ${formatDate(new Date())}</div>
        </div>

        <div class="section">
            <h2>News Item Information</h2>
            <table class="info-table">
                <tr><th>Headline</th><td>${newsItem.headline}</td></tr>
                <tr><th>Source URL</th><td>${newsItem.sourceUrl}</td></tr>
                <tr><th>Content Type</th><td>${newsItem.contentType}</td></tr>
                <tr><th>Status</th><td>${newsItem.status}</td></tr>
                <tr><th>Created</th><td>${formatDate(newsItem.createdAt)}</td></tr>
                <tr><th>Updated</th><td>${formatDate(newsItem.updatedAt)}</td></tr>
            </table>
        </div>

        <div class="section">
            <h2>Original Content</h2>
            <div class="content-box">${newsItem.content || 'No content available'}</div>
        </div>

        <div class="page-break">
            <h2>NewsJack Platform Content</h2>
            ${platformContent || '<p>No platform content generated yet.</p>'}
        </div>

        ${metricsContent}

        <div class="footer">
            Generated by NewsGlue â€¢ ${new Date().toLocaleString()}
        </div>
    </body>
    </html>
  `;
};

// Generate Campaign Dossier HTML content
const generateCampaignDossierHTML = (campaign: any, newsItemsData: any[], channels: any[]) => {
  // Generate channels table
  let channelsContent = '';
  if (channels && channels.length > 0) {
    const channelsRows = channels.map(channel => 
      `<tr><td>${channel.platform}</td><td>${channel.enabled ? 'Enabled' : 'Disabled'}</td></tr>`
    ).join('');
    channelsContent = `
      <table class="info-table">
        <tr><th>Platform</th><th>Status</th></tr>
        ${channelsRows}
      </table>
    `;
  } else {
    channelsContent = '<p>No social platforms configured</p>';
  }

  // Generate news items content
  let newsItemsContent = '';
  if (newsItemsData && newsItemsData.length > 0) {
    newsItemsContent = newsItemsData.map((item, index) => {
      let platformOutputsHTML = '';
      const platformOutputs = item.platformOutputs || {};
      
      if (Object.keys(platformOutputs).length > 0) {
        platformOutputsHTML = `
          <div class="subsection">
            <h4>Generated Content:</h4>
            ${Object.entries(platformOutputs).map(([platform, content]) => {
              if (content) {
                return `
                  <div class="platform-output">
                    <strong>${platform.charAt(0).toUpperCase() + platform.slice(1)}:</strong>
                    <div class="content-text">${content}</div>
                  </div>
                `;
              }
              return '';
            }).join('')}
          </div>
        `;
      }

      return `
        <div class="news-item">
          <h3>${index + 1}. ${item.headline}</h3>
          <table class="info-table">
            <tr><th>Source URL</th><td>${item.sourceUrl}</td></tr>
            <tr><th>Status</th><td>${item.status}</td></tr>
            <tr><th>Content Type</th><td>${item.contentType}</td></tr>
            <tr><th>Created</th><td>${formatDate(item.createdAt)}</td></tr>
          </table>
          ${platformOutputsHTML}
        </div>
      `;
    }).join('');
  } else {
    newsItemsContent = '<p>No news items found for this campaign</p>';
  }

  return `
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <title>Campaign Dossier - ${campaign.campaignName}</title>
        <style>
            @page { size: A4; margin: 1cm; }
            body { font-family: 'Open Sans', Arial, sans-serif; font-size: 11pt; line-height: 1.4; color: #333; }
            .header { text-align: center; margin-bottom: 40px; border-bottom: 3px solid #2563eb; padding-bottom: 20px; }
            .title { font-size: 28pt; font-weight: bold; color: #2563eb; margin-bottom: 15px; }
            .campaign-title { font-size: 20pt; font-weight: bold; color: #1f2937; margin-bottom: 15px; }
            .subtitle { font-size: 14pt; color: #666; margin-bottom: 8px; }
            .section { margin-bottom: 40px; }
            .section h2 { font-size: 18pt; font-weight: bold; color: #1f2937; margin-bottom: 20px; border-bottom: 2px solid #e5e7eb; padding-bottom: 8px; }
            .subsection { margin: 20px 0; }
            .subsection h4 { font-size: 12pt; font-weight: bold; color: #374151; margin-bottom: 10px; }
            .info-table { width: 100%; border-collapse: collapse; margin: 15px 0; }
            .info-table th, .info-table td { border: 1px solid #d1d5db; padding: 10px; text-align: left; }
            .info-table th { background-color: #f9fafb; font-weight: bold; width: 30%; }
            .news-item { margin-bottom: 30px; padding: 20px; border: 1px solid #e5e7eb; border-radius: 8px; }
            .news-item h3 { font-size: 12pt; font-weight: bold; color: #2563eb; margin-bottom: 15px; }
            .platform-output { background: #f8fafc; padding: 12px; margin: 8px 0; border-left: 4px solid #10b981; }
            .platform-output strong { color: #059669; }
            .content-text { margin-top: 5px; font-style: italic; }
            .page-break { page-break-before: always; }
            .footer { position: fixed; bottom: 0; width: 100%; text-align: center; font-size: 10pt; color: #666; }
            .toc { background: #f9fafb; padding: 20px; margin: 20px 0; border-radius: 8px; }
            .toc h3 { margin-bottom: 15px; color: #1f2937; }
            .toc ul { list-style: none; padding: 0; }
            .toc li { margin-bottom: 8px; }
            .toc a { text-decoration: none; color: #2563eb; }
        </style>
    </head>
    <body>
        <div class="header">
            <div class="title">Campaign Dossier</div>
            <div class="campaign-title">${campaign.campaignName}</div>
            <div class="subtitle">Prepared: ${formatDate(new Date())}</div>
            <div class="subtitle">Campaign Created: ${formatDate(campaign.createdAt)}</div>
        </div>

        <div class="toc">
            <h3>Table of Contents</h3>
            <ul>
                <li><a href="#section1">Section 1: Campaign Setup</a></li>
                <li><a href="#section2">Section 2: Social Platform Strategy</a></li>
                <li><a href="#section3">Section 3: News Items & NewsJacks</a></li>
                <li><a href="#section4">Section 4: Performance Metrics</a></li>
            </ul>
        </div>

        <div class="page-break">
            <div class="section" id="section1">
                <h2>Section 1: Campaign Setup</h2>
                <table class="info-table">
                    <tr><th>Campaign Name</th><td>${campaign.campaignName || 'N/A'}</td></tr>
                    <tr><th>Status</th><td>${campaign.status || 'N/A'}</td></tr>
                    <tr><th>Website URL</th><td>${campaign.websiteUrl || 'N/A'}</td></tr>
                    <tr><th>CTA URL</th><td>${campaign.ctaUrl || 'N/A'}</td></tr>
                    <tr><th>Emotional Objective</th><td>${campaign.emotionalObjective || 'N/A'}</td></tr>
                    <tr><th>Audience Pain Points</th><td>${campaign.audiencePain || 'N/A'}</td></tr>
                    <tr><th>Additional Data</th><td>${campaign.additionalData || 'N/A'}</td></tr>
                    <tr><th>Created</th><td>${formatDate(campaign.createdAt)}</td></tr>
                    <tr><th>Last Updated</th><td>${formatDate(campaign.updatedAt)}</td></tr>
                </table>
            </div>
        </div>

        <div class="page-break">
            <div class="section" id="section2">
                <h2>Section 2: Social Platform Strategy</h2>
                ${channelsContent}
            </div>
        </div>

        <div class="page-break">
            <div class="section" id="section3">
                <h2>Section 3: News Items & NewsJacks</h2>
                ${newsItemsContent}
            </div>
        </div>

        <div class="page-break">
            <div class="section" id="section4">
                <h2>Section 4: Performance Metrics</h2>
                <p>Performance metrics will be available when Module 8 analytics are implemented.</p>
                <div style="background: #fef3c7; padding: 15px; border-left: 4px solid #f59e0b; margin: 20px 0;">
                    <strong>Coming Soon:</strong> This section will include engagement metrics, conversion rates, 
                    click-through rates, and other performance indicators once Module 8 analytics are integrated.
                </div>
            </div>
        </div>

        <div class="footer">
            Generated by NewsGlue â€¢ ${new Date().toLocaleString()}
        </div>
    </body>
    </html>
  `;
};

// Simple HTML to PDF conversion function
const generateHTMLContent = (title: string, content: string) => {
  return `
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>${title}</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
        .header { text-align: center; margin-bottom: 30px; border-bottom: 2px solid #333; padding-bottom: 20px; }
        .section { margin-bottom: 30px; }
        .subsection { margin-left: 20px; margin-bottom: 20px; }
        .platform-output { background: #f5f5f5; padding: 15px; margin: 10px 0; border-left: 4px solid #2563eb; }
        .metrics { display: grid; grid-template-columns: 1fr 1fr; gap: 20px; }
        .metric-box { background: #f9f9f9; padding: 15px; border: 1px solid #ddd; }
        .footer { text-align: center; margin-top: 50px; font-size: 12px; color: #666; }
        table { width: 100%; border-collapse: collapse; margin: 15px 0; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
        .monospace { font-family: monospace; background: #f8f8f8; padding: 5px; }
    </style>
</head>
<body>
    <div class="header">
        <h1>${title}</h1>
        <p>Generated by NewsGlue - ${new Date().toLocaleDateString()}</p>
    </div>
    ${content}
    <div class="footer">
        <p>Generated by NewsGlue</p>
    </div>
</body>
</html>`;
};

// Generate NewsJack PDF for a specific news item
router.get('/newsjack/:newsItemId', requireAuth, async (req, res) => {
  try {
    const { newsItemId } = req.params;
    
    // Fetch news item with platform outputs
    const newsItem = await db.query.newsItems.findFirst({
      where: eq(newsItems.id, parseInt(newsItemId))
    });

    if (!newsItem) {
      return res.status(404).json({ error: 'News item not found' });
    }

    // Fetch campaign details
    const campaign = await db.query.campaigns.findFirst({
      where: eq(campaigns.id, newsItem.campaignId)
    });

    // Generate HTML content for the PDF
    let platformOutputsHTML = '';
    Object.entries(newsItem.platformOutputs || {}).forEach(([platform, output]: [string, any]) => {
      platformOutputsHTML += `
        <div class="platform-output">
          <h3>${platform.toUpperCase()} Output</h3>
          <table>
            <tr><th>Content</th><td><div class="monospace">${output.content || 'N/A'}</div></td></tr>
            <tr><th>Word Count</th><td>${output.content ? output.content.split(/\s+/).length : 0} words</td></tr>
            <tr><th>Character Count</th><td>${output.content ? output.content.length : 0} characters</td></tr>
            <tr><th>Hashtags</th><td>${output.hashtags ? output.hashtags.map((tag: string) => '#' + tag).join(' ') : 'None'}</td></tr>
            <tr><th>CTA</th><td>${output.cta || 'N/A'}</td></tr>
            <tr><th>CTA URL</th><td>${output.ctaUrl || 'N/A'}</td></tr>
            <tr><th>Estimated Engagement</th><td>${output.metrics?.estimatedEngagement || 'N/A'}</td></tr>
            <tr><th>News Focus</th><td>${output.metrics?.newsPercentage ? `${output.metrics.newsPercentage}%` : 'N/A'}</td></tr>
            <tr><th>Campaign Focus</th><td>${output.metrics?.campaignPercentage ? `${output.metrics.campaignPercentage}%` : 'N/A'}</td></tr>
          </table>
        </div>
      `;
    });

    const contentHTML = `
      <div class="section">
        <h2>News Item Information</h2>
        <table>
          <tr><th>Headline</th><td>${newsItem.headline || 'N/A'}</td></tr>
          <tr><th>Source URL</th><td><a href="${newsItem.sourceUrl || '#'}">${newsItem.sourceUrl || 'N/A'}</a></td></tr>
          <tr><th>Date</th><td>${formatDate(newsItem.createdAt)}</td></tr>
          <tr><th>Campaign</th><td>${campaign?.campaignName || 'N/A'}</td></tr>
        </table>
      </div>
      
      <div class="section">
        <h2>Platform Outputs</h2>
        ${platformOutputsHTML}
      </div>
    `;

    const htmlContent = generateHTMLContent('NewsJack Content Report', contentHTML);
    
    res.setHeader('Content-Type', 'text/html');
    res.setHeader('Content-Disposition', `attachment; filename="newsjack-${newsItemId}-${Date.now()}.html"`);
    res.send(htmlContent);

  } catch (error) {
    console.error('PDF generation error:', error);
    res.status(500).json({ error: 'Failed to generate PDF' });
  }
});

// Generate Campaign Dossier PDF
router.get('/campaign-dossier/:campaignId', requireAuth, async (req, res) => {
  try {
    const { campaignId } = req.params;
    
    // Fetch campaign details
    const campaign = await db.query.campaigns.findFirst({
      where: eq(campaigns.id, campaignId)
    });

    if (!campaign) {
      return res.status(404).json({ error: 'Campaign not found' });
    }

    // Fetch all news items for this campaign
    const campaignNewsItems = await db.query.newsItems.findMany({
      where: eq(newsItems.campaignId, campaignId)
    });

    // Calculate metrics
    const totalNewsItems = campaignNewsItems.length;
    const totalOutputs = campaignNewsItems.reduce((acc, item) => {
      return acc + Object.keys(item.platformOutputs || {}).length;
    }, 0);
    const draftCount = campaignNewsItems.filter(item => item.status === 'draft').length;
    const publishedCount = campaignNewsItems.filter(item => item.status === 'active').length;

    // Generate news items HTML
    let newsItemsHTML = '';
    campaignNewsItems.forEach((item, index) => {
      let platformOutputsHTML = '';
      Object.entries(item.platformOutputs || {}).forEach(([platform, output]: [string, any]) => {
        platformOutputsHTML += `
          <div class="subsection">
            <h4>${platform.toUpperCase()}:</h4>
            <div class="monospace">${output.content || 'No content generated'}</div>
          </div>
        `;
      });

      newsItemsHTML += `
        <div class="subsection">
          <h3>${index + 1}. ${item.headline}</h3>
          <table>
            <tr><th>Source</th><td><a href="${item.sourceUrl || '#'}">${item.sourceUrl || 'N/A'}</a></td></tr>
            <tr><th>Status</th><td>${item.status || 'draft'}</td></tr>
          </table>
          ${platformOutputsHTML}
        </div>
      `;
    });

    const contentHTML = `
      <div class="section">
        <h2>Cover Page</h2>
        <table>
          <tr><th>Campaign Name</th><td>${campaign.campaignName || 'N/A'}</td></tr>
          <tr><th>Date Created</th><td>${formatDate(campaign.createdAt)}</td></tr>
          <tr><th>Operator</th><td>${req.user?.username || 'NewsGlue User'}</td></tr>
        </table>
      </div>

      <div class="section">
        <h2>1. Campaign Strategy</h2>
        <table>
          <tr><th>Audience Pain</th><td>${campaign.audiencePain || 'Not specified'}</td></tr>
          <tr><th>Emotional Objective</th><td>${campaign.emotionalObjective || 'Not specified'}</td></tr>
          <tr><th>Website URL</th><td><a href="${campaign.websiteUrl || '#'}">${campaign.websiteUrl || 'Not specified'}</a></td></tr>
          <tr><th>CTA URL</th><td><a href="${campaign.ctaUrl || '#'}">${campaign.ctaUrl || 'Not specified'}</a></td></tr>
        </table>
      </div>

      <div class="section">
        <h2>2. Channel Configuration</h2>
        <div class="subsection">
          ${campaign.socialSettings ? 
            Object.entries(campaign.socialSettings as any).map(([platform, settings]: [string, any]) => 
              `<p><strong>${platform.toUpperCase()}:</strong> ${settings.enabled ? 'Enabled' : 'Disabled'} | Tone: ${settings.tone || 'Default'} | News Ratio: ${settings.newsRatio || 50}%</p>`
            ).join('') : 
            '<p>No channel configuration specified</p>'
          }
        </div>
      </div>

      <div class="section">
        <h2>3. News Items & Generated Content</h2>
        ${newsItemsHTML}
      </div>

      <div class="section">
        <h2>4. Metrics Snapshot</h2>
        <div class="metrics">
          <div class="metric-box">
            <h4>Total News Items Processed</h4>
            <p>${totalNewsItems}</p>
          </div>
          <div class="metric-box">
            <h4>Total Platform Outputs Generated</h4>
            <p>${totalOutputs}</p>
          </div>
          <div class="metric-box">
            <h4>Draft Items</h4>
            <p>${draftCount}</p>
          </div>
          <div class="metric-box">
            <h4>Published Items</h4>
            <p>${publishedCount}</p>
          </div>
          <div class="metric-box">
            <h4>Average Outputs per News Item</h4>
            <p>${totalNewsItems > 0 ? (totalOutputs / totalNewsItems).toFixed(1) : '0'}</p>
          </div>
          <div class="metric-box">
            <h4>Campaign Completion</h4>
            <p>${totalNewsItems > 0 ? Math.round((publishedCount / totalNewsItems) * 100) : 0}%</p>
          </div>
        </div>
      </div>
    `;

    const htmlContent = generateHTMLContent('Campaign Dossier', contentHTML);
    
    res.setHeader('Content-Type', 'text/html');
    res.setHeader('Content-Disposition', `attachment; filename="campaign-dossier-${campaignId}-${Date.now()}.html"`);
    res.send(htmlContent);

  } catch (error) {
    console.error('Campaign PDF generation error:', error);
    res.status(500).json({ error: 'Failed to generate campaign dossier PDF' });
  }
});

export default router;