import { Router } from 'express';
import { db } from '../../../db/index.js';
import { campaigns, newsItems } from '../../../db/schema.js';
import { eq } from 'drizzle-orm';

// Simple auth middleware
const requireAuth = (req: any, res: any, next: any) => {
  if (req.isAuthenticated()) return next();
  res.status(401).json({ message: "Not authenticated" });
};

const router = Router();

// Helper function to format date
const formatDate = (date: Date | string) => {
  return new Date(date).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
};

// Generate NewsJack PDF for a specific news item
router.get('/newsjack/:newsItemId', requireAuth, async (req, res) => {
  try {
    const { newsItemId } = req.params;
    
    // Fetch news item with platform outputs
    const newsItem = await db.query.newsItems.findFirst({
      where: eq(newsItems.id, parseInt(newsItemId))
    });

    if (!newsItem) {
      return res.status(404).json({ error: 'News item not found' });
    }

    // Fetch campaign details
    const campaign = await db.query.campaigns.findFirst({
      where: eq(campaigns.id, newsItem.campaignId)
    });

    const docDefinition = {
      content: [
        // Header
        {
          text: 'NewsJack Content Report',
          style: 'header',
          margin: [0, 0, 0, 20]
        },
        
        // News Item Details
        {
          text: 'News Item Information',
          style: 'subheader',
          margin: [0, 0, 0, 10]
        },
        {
          columns: [
            { text: 'Headline:', style: 'label', width: 80 },
            { text: newsItem.headline || 'N/A', style: 'content' }
          ],
          margin: [0, 0, 0, 5]
        },
        {
          columns: [
            { text: 'Source URL:', style: 'label', width: 80 },
            { text: newsItem.sourceUrl || 'N/A', style: 'content', link: newsItem.sourceUrl }
          ],
          margin: [0, 0, 0, 5]
        },
        {
          columns: [
            { text: 'Date:', style: 'label', width: 80 },
            { text: formatDate(newsItem.createdAt), style: 'content' }
          ],
          margin: [0, 0, 0, 5]
        },
        {
          columns: [
            { text: 'Campaign:', style: 'label', width: 80 },
            { text: campaign?.campaignName || 'N/A', style: 'content' }
          ],
          margin: [0, 0, 0, 20]
        },

        // Platform Outputs
        ...Object.entries(newsItem.platformOutputs || {}).map(([platform, output]: [string, any]) => [
          {
            text: `${platform.toUpperCase()} Output`,
            style: 'platformHeader',
            margin: [0, 20, 0, 10]
          },
          {
            table: {
              widths: ['25%', '75%'],
              body: [
                ['Content:', { text: output.content || 'N/A', style: 'monospace' }],
                ['Word Count:', `${output.content ? output.content.split(/\s+/).length : 0} words`],
                ['Character Count:', `${output.content ? output.content.length : 0} characters`],
                ['Hashtags:', output.hashtags ? output.hashtags.map((tag: string) => '#' + tag).join(' ') : 'None'],
                ['CTA:', output.cta || 'N/A'],
                ['CTA URL:', output.ctaUrl || 'N/A'],
                ['Estimated Engagement:', output.metrics?.estimatedEngagement || 'N/A'],
                ['News Focus:', output.metrics?.newsPercentage ? `${output.metrics.newsPercentage}%` : 'N/A'],
                ['Campaign Focus:', output.metrics?.campaignPercentage ? `${output.metrics.campaignPercentage}%` : 'N/A']
              ]
            },
            layout: 'lightHorizontalLines',
            margin: [0, 0, 0, 15]
          }
        ]).flat(),

        // Footer
        {
          text: 'Generated by NewsGlue',
          style: 'footer',
          alignment: 'center',
          margin: [0, 30, 0, 0]
        }
      ],
      
      styles: {
        header: {
          fontSize: 18,
          bold: true,
          color: '#1f2937'
        },
        subheader: {
          fontSize: 14,
          bold: true,
          color: '#374151'
        },
        platformHeader: {
          fontSize: 12,
          bold: true,
          color: '#2563eb',
          background: '#f3f4f6'
        },
        label: {
          fontSize: 10,
          bold: true,
          color: '#6b7280'
        },
        content: {
          fontSize: 10,
          color: '#111827'
        },
        monospace: {
          fontSize: 9,
          font: 'Courier',
          color: '#111827'
        },
        footer: {
          fontSize: 8,
          italics: true,
          color: '#9ca3af'
        }
      },
      
      defaultStyle: {
        fontSize: 10,
        font: 'Helvetica'
      }
    };

    const pdfDoc = PdfMake.createPdf(docDefinition);
    
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `attachment; filename="newsjack-${newsItemId}-${Date.now()}.pdf"`);
    
    pdfDoc.getBuffer((buffer: Buffer) => {
      res.send(buffer);
    });

  } catch (error) {
    console.error('PDF generation error:', error);
    res.status(500).json({ error: 'Failed to generate PDF' });
  }
});

// Generate Campaign Dossier PDF
router.get('/campaign-dossier/:campaignId', requireAuth, async (req, res) => {
  try {
    const { campaignId } = req.params;
    
    // Fetch campaign details
    const campaign = await db.query.campaigns.findFirst({
      where: eq(campaigns.id, campaignId)
    });

    if (!campaign) {
      return res.status(404).json({ error: 'Campaign not found' });
    }

    // Fetch all news items for this campaign
    const campaignNewsItems = await db.query.newsItems.findMany({
      where: eq(newsItems.campaignId, campaignId)
    });

    // Calculate metrics
    const totalNewsItems = campaignNewsItems.length;
    const totalOutputs = campaignNewsItems.reduce((acc, item) => {
      return acc + Object.keys(item.platformOutputs || {}).length;
    }, 0);
    const draftCount = campaignNewsItems.filter(item => item.status === 'draft').length;
    const publishedCount = campaignNewsItems.filter(item => item.status === 'active').length;

    const docDefinition = {
      content: [
        // Cover Page
        {
          text: campaign.campaignName || 'Campaign Dossier',
          style: 'coverTitle',
          alignment: 'center',
          margin: [0, 100, 0, 20]
        },
        {
          text: 'Campaign Strategy & Content Report',
          style: 'coverSubtitle',
          alignment: 'center',
          margin: [0, 0, 0, 40]
        },
        {
          columns: [
            { text: 'Brand Archetype:', style: 'coverLabel', width: '40%' },
            { text: campaign.brandArchetype || 'Not specified', style: 'coverContent' }
          ],
          margin: [0, 0, 0, 10]
        },
        {
          columns: [
            { text: 'Date Created:', style: 'coverLabel', width: '40%' },
            { text: formatDate(campaign.createdAt), style: 'coverContent' }
          ],
          margin: [0, 0, 0, 10]
        },
        {
          columns: [
            { text: 'Operator:', style: 'coverLabel', width: '40%' },
            { text: req.user?.username || 'NewsGlue User', style: 'coverContent' }
          ],
          margin: [0, 0, 0, 60]
        },
        {
          text: 'Generated by NewsGlue',
          style: 'coverFooter',
          alignment: 'center',
          margin: [0, 0, 0, 0]
        },
        
        // Page break
        { text: '', pageBreak: 'after' },

        // Section 1: Campaign Strategy
        {
          text: '1. Campaign Strategy',
          style: 'sectionHeader',
          margin: [0, 0, 0, 15]
        },
        {
          table: {
            widths: ['30%', '70%'],
            body: [
              ['Audience Pain:', campaign.audiencePain || 'Not specified'],
              ['Emotional Objective:', campaign.emotionalObjective || 'Not specified'],
              ['Website URL:', campaign.websiteUrl || 'Not specified'],
              ['CTA URL:', campaign.ctaUrl || 'Not specified'],
              ['Brand Archetype:', campaign.brandArchetype || 'Not specified'],
              ['Brand Tone:', campaign.brandTone || 'Not specified']
            ]
          },
          layout: 'lightHorizontalLines',
          margin: [0, 0, 0, 20]
        },

        // Section 2: Channel Configuration
        {
          text: '2. Channel Configuration',
          style: 'sectionHeader',
          margin: [0, 0, 0, 15]
        },
        {
          text: campaign.socialSettings ? 
            Object.entries(campaign.socialSettings as any).map(([platform, settings]: [string, any]) => 
              `${platform.toUpperCase()}: ${settings.enabled ? 'Enabled' : 'Disabled'} | Tone: ${settings.tone || 'Default'} | News Ratio: ${settings.newsRatio || 50}%`
            ).join('\n') : 
            'No channel configuration specified',
          style: 'content',
          margin: [0, 0, 0, 20]
        },

        // Section 3: News Items & NewsJacks
        {
          text: '3. News Items & Generated Content',
          style: 'sectionHeader',
          margin: [0, 0, 0, 15]
        },
        
        ...campaignNewsItems.map((item, index) => [
          {
            text: `${index + 1}. ${item.headline}`,
            style: 'newsItemHeader',
            margin: [0, 15, 0, 8]
          },
          {
            columns: [
              { text: 'Source:', style: 'label', width: '15%' },
              { text: item.sourceUrl || 'N/A', style: 'content', link: item.sourceUrl }
            ],
            margin: [0, 0, 0, 5]
          },
          {
            columns: [
              { text: 'Status:', style: 'label', width: '15%' },
              { text: item.status || 'draft', style: 'content' }
            ],
            margin: [0, 0, 0, 10]
          },
          
          // Platform outputs for this news item
          ...Object.entries(item.platformOutputs || {}).map(([platform, output]: [string, any]) => [
            {
              text: `${platform.toUpperCase()}:`,
              style: 'platformLabel',
              margin: [20, 5, 0, 3]
            },
            {
              text: output.content || 'No content generated',
              style: 'platformContent',
              margin: [20, 0, 0, 8]
            }
          ]).flat()
        ]).flat(),

        // Section 4: Metrics Snapshot
        { text: '', pageBreak: 'before' },
        {
          text: '4. Metrics Snapshot',
          style: 'sectionHeader',
          margin: [0, 0, 0, 15]
        },
        {
          table: {
            widths: ['50%', '50%'],
            body: [
              ['Total News Items Processed:', totalNewsItems.toString()],
              ['Total Platform Outputs Generated:', totalOutputs.toString()],
              ['Draft Items:', draftCount.toString()],
              ['Published Items:', publishedCount.toString()],
              ['Average Outputs per News Item:', totalNewsItems > 0 ? (totalOutputs / totalNewsItems).toFixed(1) : '0'],
              ['Campaign Completion:', `${totalNewsItems > 0 ? Math.round((publishedCount / totalNewsItems) * 100) : 0}%`]
            ]
          },
          layout: 'lightHorizontalLines',
          margin: [0, 0, 0, 20]
        }
      ],

      styles: {
        coverTitle: {
          fontSize: 24,
          bold: true,
          color: '#1f2937'
        },
        coverSubtitle: {
          fontSize: 16,
          color: '#6b7280'
        },
        coverLabel: {
          fontSize: 12,
          bold: true,
          color: '#374151'
        },
        coverContent: {
          fontSize: 12,
          color: '#111827'
        },
        coverFooter: {
          fontSize: 10,
          italics: true,
          color: '#9ca3af'
        },
        sectionHeader: {
          fontSize: 16,
          bold: true,
          color: '#1f2937'
        },
        newsItemHeader: {
          fontSize: 12,
          bold: true,
          color: '#2563eb'
        },
        platformLabel: {
          fontSize: 10,
          bold: true,
          color: '#059669'
        },
        platformContent: {
          fontSize: 9,
          font: 'Courier',
          color: '#374151'
        },
        label: {
          fontSize: 10,
          bold: true,
          color: '#6b7280'
        },
        content: {
          fontSize: 10,
          color: '#111827'
        }
      },

      defaultStyle: {
        fontSize: 10,
        font: 'Helvetica'
      },

      footer: function(currentPage: number, pageCount: number) {
        return {
          columns: [
            { text: campaign.campaignName || 'Campaign Dossier', fontSize: 8, color: '#9ca3af' },
            { text: `Page ${currentPage} of ${pageCount}`, fontSize: 8, color: '#9ca3af', alignment: 'right' }
          ],
          margin: [40, 0]
        };
      }
    };

    const pdfDoc = PdfMake.createPdf(docDefinition);
    
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `attachment; filename="campaign-dossier-${campaignId}-${Date.now()}.pdf"`);
    
    pdfDoc.getBuffer((buffer: Buffer) => {
      res.send(buffer);
    });

  } catch (error) {
    console.error('Campaign PDF generation error:', error);
    res.status(500).json({ error: 'Failed to generate campaign dossier PDF' });
  }
});

export default router;