
üß† Prompt 13 of 20 ‚Äì Implement SEO Blog Publishing & AI Discoverability Engine

Execute only this prompt and don‚Äôt try to interpret or anticipate what comes next.



Purpose:

Integrate the blog publishing and AI discoverability system from the prior NewsGlue version into this current build for the first time. This is not a ‚Äúrestore‚Äù ‚Äî it‚Äôs a clean, first-time implementation.



Scope:

Allow instant publishing of blog-style NewsJacks to external SEO-optimized landing pages

Auto-generate schema.org, OpenGraph, and sitemap.xml for AI and search engine indexing

Ensure each published item has a live URL and toggle indicator with publishing status

// ‚úÖ IMPLEMENT: SEO Blog Publishing & AI Discoverability System

// 1. FRONTEND ‚Äì Blog Output Frame in Module 6

// a. Add SEO toggle next to each blog output (client/src/components/blog-output.tsx):
<SeoLandingPageButton 
  newsjackId={newsjack.id}
  initialStatus={newsjack.landingPageStatus}
  initialUrl={newsjack.landingPageUrl}
/>

// b. Component: client/src/components/seo-landing-page-button.tsx
‚Ä¢ Toggle invokes POST /api/landing-page/:newsjackId/toggle
‚Ä¢ Button states: "Create", "Creating‚Ä¶", "Published ‚úÖ" with clickable link
‚Ä¢ Auto-refresh published status every 10 seconds post-toggle

// 2. BACKEND ‚Äì Landing Page Services

// a. Routes (server/routes/landing-page.ts)
‚Ä¢ POST /generate ‚Üí generateLandingPageContent()
‚Ä¢ POST /:newsjackId/toggle ‚Üí calls generateLandingPage()
‚Ä¢ GET /:newsjackId/status ‚Üí returns { slug, status, url }

// b. Service Logic (server/landing-page/service.ts)
‚Ä¢ createSlug() from headline
‚Ä¢ Write blog HTML to public/landing-pages/${slug}.html
‚Ä¢ Return https://seo-landing-host-michaelsthewrit.replit.app/news/${slug}

// 3. SEO + AI ENHANCEMENTS ‚Äì template.ts

// a. Inject in HTML template
‚Ä¢ Title, Description, Keywords, Canonical URL
‚Ä¢ OpenGraph tags (og:title, og:image, og:description)
‚Ä¢ schema.org JSON-LD for Article + Organization
‚Ä¢ AI-only discovery <div style="display:none"> block with campaign metadata

// 4. SITEMAP

// a. Route (server/routes/ai-sitemap.ts)
‚Ä¢ Serve dynamic sitemap at /ai-sitemap.xml
‚Ä¢ Includes <loc> and <lastmod> for all published landingPageSlugs

// 5. DATABASE

‚Ä¢ Extend newsjackOutputs with: landingPageStatus, landingPageSlug, landingPageUrl
‚Ä¢ Update via toggle + generation routes above
‚Ä¢ Validate ownership before generating

// 6. FILE STORAGE

‚Ä¢ Ensure /public/landing-pages directory exists
‚Ä¢ Create if missing using fs.mkdirSync with recursive=true
‚Ä¢ Save each blog as static HTML page to that directory
